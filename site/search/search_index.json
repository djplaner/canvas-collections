{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Canvas Collections Improve the learner experience of your course site by improving your site's Information architecture; and, Group modules into collections, a long requested feature which is not being provided by the vendor . Visual design. Use different, collection specific visual representations.","title":"Home"},{"location":"#canvas-collections","text":"Improve the learner experience of your course site by improving your site's Information architecture; and, Group modules into collections, a long requested feature which is not being provided by the vendor . Visual design. Use different, collection specific visual representations.","title":"Canvas Collections"},{"location":"card-design/","text":"Card Design Document thinking and experiments with design of the Module cards, including - Microsoft's Adaptive Cards - Bootstrap Microsoft's Adaptive Cards Microsoft's Adaptive Cards provide a platform-agnostic way to specify Cards in JSON and provide renderers for various platforms, including Javascript . However, the JavaScript renderer doesn't solve the problem of HTML design, we still need to 1. Design the make up of the individual cards 2. Design the CSS to represent and individual card 3. Design the CSS to represent groups of cards i.e. provides a lot of functionality I wasn't thinking of using, without solving the problem of me avoiding any need for CSS design. On the plus side, the JSON that is produced could in theory be exported into other platforms that support adaptive cards (e.g. Teams) Bootstrap Bootstrap's cards provide an apparently reasonably close functional approximation.","title":"Card Design"},{"location":"card-design/#card-design","text":"Document thinking and experiments with design of the Module cards, including - Microsoft's Adaptive Cards - Bootstrap","title":"Card Design"},{"location":"card-design/#microsofts-adaptive-cards","text":"Microsoft's Adaptive Cards provide a platform-agnostic way to specify Cards in JSON and provide renderers for various platforms, including Javascript . However, the JavaScript renderer doesn't solve the problem of HTML design, we still need to 1. Design the make up of the individual cards 2. Design the CSS to represent and individual card 3. Design the CSS to represent groups of cards i.e. provides a lot of functionality I wasn't thinking of using, without solving the problem of me avoiding any need for CSS design. On the plus side, the JSON that is produced could in theory be exported into other platforms that support adaptive cards (e.g. Teams)","title":"Microsoft's Adaptive Cards"},{"location":"card-design/#bootstrap","text":"Bootstrap's cards provide an apparently reasonably close functional approximation.","title":"Bootstrap"},{"location":"config_format/","text":"Format of the Canvas Collections configuration file The configuration details of Canvas Collections for a specific course is stored in a JSON file (call cc_config.json ) placed in the Canvas course's Files area. Eventually, the Canvas Collections configuration interface will allow appropriate people to create and modify the configuration. Work in Progress : :construction: The format of the configuration file is currently under development. Some likely changes outlined below. About JSON explain about JSON file format - link to an explanation explain about json editors How to modify Canvas Collections configuration Top level attributes The configuration file defines a number of attributes which control how Canvas Collections behaves. Currently the top level attributes include: STATUS - Is Canvas Collections turned on or off? DEFAULT_ACTIVE_COLLECTION - Which collection is shown initially for each user? COLLECTIONS - What collections are modules grouped into? How are they represented? MODULES - How are each of the modules to be represented? The following sections explain the configuration for each of these attributes -- link to a complete example JSON file that includes the following STATUS \"STATUS\": \"on\", DEFAULT_ACTIVE_COLLECTION \"DEFAULT_ACTIVE_COLLECTION\":\"Learning Journey\", COLLECTIONS \"COLLECTIONS\": { \"Learning Journey\": { \"representation\": \"GriffithCards\", \"description\" : \"\", \"icon\" : \"far fa-compass\" }, \"Assessment\": { \"representation\": \"GriffithCards\", \"description\" : \"\", \"icon\" : \"icon-assignment\" } } MODULES \"MODULES\": { \"Welcome and Getting Started\": { \"name\": \"Welcome and Getting Started\", \"image\": \"https://www.webwisewording.com/wp-content/uploads/aaron-burden-AvqpdLRjABs-unsplash.jpg\", \"label\": \"\", \"imageSize\": \"bg-contain\", \"num\": \"\", \"description\": \"<p>Why, how and what you will be learning in this course? How wil you demonstrate your learning? How will you be supported?\", \"collection\": \"Learning Journey\", \"comingSoon\": { \"date\": { \"week\": \"4\" }, \"order\": 1 }, \"date\": { \"label\": \"Before\", \"week\": \"1\" } }, \"COM31 FAQs\": { \"image\": \"https://www.ticliblaxland.com.au/wp-content/uploads/2020/11/UDIN.jpeg\", \"collection\": \"Learning Journey\", \"label\": \"\", \"num:\": \"\", \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus in imperdiet nisi. Etiam non blandit ante. Integer ullamcorper eros nibh. Integer porta, est a porta finibus, turpis nisl semper elit, sed convallis neque ipsum ac ex.\" } }","title":"Format of the Canvas Collections configuration file"},{"location":"config_format/#format-of-the-canvas-collections-configuration-file","text":"The configuration details of Canvas Collections for a specific course is stored in a JSON file (call cc_config.json ) placed in the Canvas course's Files area. Eventually, the Canvas Collections configuration interface will allow appropriate people to create and modify the configuration. Work in Progress : :construction: The format of the configuration file is currently under development. Some likely changes outlined below.","title":"Format of the Canvas Collections configuration file"},{"location":"config_format/#about-json","text":"explain about JSON file format - link to an explanation explain about json editors","title":"About JSON"},{"location":"config_format/#how-to-modify-canvas-collections-configuration","text":"","title":"How to modify Canvas Collections configuration"},{"location":"config_format/#top-level-attributes","text":"The configuration file defines a number of attributes which control how Canvas Collections behaves. Currently the top level attributes include: STATUS - Is Canvas Collections turned on or off? DEFAULT_ACTIVE_COLLECTION - Which collection is shown initially for each user? COLLECTIONS - What collections are modules grouped into? How are they represented? MODULES - How are each of the modules to be represented? The following sections explain the configuration for each of these attributes -- link to a complete example JSON file that includes the following","title":"Top level attributes"},{"location":"config_format/#status","text":"\"STATUS\": \"on\",","title":"STATUS"},{"location":"config_format/#default_active_collection","text":"\"DEFAULT_ACTIVE_COLLECTION\":\"Learning Journey\",","title":"DEFAULT_ACTIVE_COLLECTION"},{"location":"config_format/#collections","text":"\"COLLECTIONS\": { \"Learning Journey\": { \"representation\": \"GriffithCards\", \"description\" : \"\", \"icon\" : \"far fa-compass\" }, \"Assessment\": { \"representation\": \"GriffithCards\", \"description\" : \"\", \"icon\" : \"icon-assignment\" } }","title":"COLLECTIONS"},{"location":"config_format/#modules","text":"\"MODULES\": { \"Welcome and Getting Started\": { \"name\": \"Welcome and Getting Started\", \"image\": \"https://www.webwisewording.com/wp-content/uploads/aaron-burden-AvqpdLRjABs-unsplash.jpg\", \"label\": \"\", \"imageSize\": \"bg-contain\", \"num\": \"\", \"description\": \"<p>Why, how and what you will be learning in this course? How wil you demonstrate your learning? How will you be supported?\", \"collection\": \"Learning Journey\", \"comingSoon\": { \"date\": { \"week\": \"4\" }, \"order\": 1 }, \"date\": { \"label\": \"Before\", \"week\": \"1\" } }, \"COM31 FAQs\": { \"image\": \"https://www.ticliblaxland.com.au/wp-content/uploads/2020/11/UDIN.jpeg\", \"collection\": \"Learning Journey\", \"label\": \"\", \"num:\": \"\", \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus in imperdiet nisi. Etiam non blandit ante. Integer ullamcorper eros nibh. Integer porta, est a porta finibus, turpis nisl semper elit, sed convallis neque ipsum ac ex.\" } }","title":"MODULES"},{"location":"install_userscript/","text":"Install canvas-collections as a userscript :warning: canvas-collections is still under construction :construction: If you cannot add Javascript to a Canvas instance, you can still use canvas-collections by installing it as a userscript. The two step process - explained below - is: 1. Install a userscript manager - for example, TamperMonkey 2. Install the canvas-collections userscript :question: You install a userscript manager into your web browser (not surprisingly) to help manage userscripts . Small Javascript programs that your browser will run when you view specific web pages. Userscripts customise those web pages to better suit your purposes. e.g. to modify a Canvas modules page to show canvas-collections. 1. Install a userscript manager TamperMonkey is a widely used userscript manager. It can be used on most modern web browsers. 1.1. Visit the Tampermonkey home page . You should see instructions for downloading (installing) TamperMonkey for your web browser. e.g. the following image for the Firefox browser 1.2. Click on the left-hand Download button As shown above, you can choose to download the stable (left-hand download button) version of TamperMonkey or the BETA (right-hand download button) version. The stable version is recommended. You will be taken to your web brower's extension or add-on service . 1.3. Follow the instructions to add Tampermonkey to your web browser Each web browser\u2019s browser extension installation process will be a little different. In general, it will provide you with details of what permissions the browser extension (Tampemonkey in this case) wishes to have and provides you with the option to install. 2. Install canvas-collections userscript With TamperMonkey installed you can now install the canvas-collections userscript . Just click on that link. If all is working you should something like the following image. An image showing TamperMonkey providing you with details of the userscript and asking if you wish to install it. 3. Turning canvas-collections off There are two ways to prevent canvas-collections from modifying your view of Canvas modules pages: - Disable TamperMonkey (or your userscript manager) - Disable the canvas-collection userscript","title":"Install canvas-collections as a userscript"},{"location":"install_userscript/#install-canvas-collections-as-a-userscript","text":":warning: canvas-collections is still under construction :construction: If you cannot add Javascript to a Canvas instance, you can still use canvas-collections by installing it as a userscript. The two step process - explained below - is: 1. Install a userscript manager - for example, TamperMonkey 2. Install the canvas-collections userscript :question: You install a userscript manager into your web browser (not surprisingly) to help manage userscripts . Small Javascript programs that your browser will run when you view specific web pages. Userscripts customise those web pages to better suit your purposes. e.g. to modify a Canvas modules page to show canvas-collections.","title":"Install canvas-collections as a userscript"},{"location":"install_userscript/#1-install-a-userscript-manager","text":"TamperMonkey is a widely used userscript manager. It can be used on most modern web browsers.","title":"1. Install a userscript manager"},{"location":"install_userscript/#11-visit-the-tampermonkey-home-page","text":"You should see instructions for downloading (installing) TamperMonkey for your web browser. e.g. the following image for the Firefox browser","title":"1.1. Visit the Tampermonkey home page."},{"location":"install_userscript/#12-click-on-the-left-hand-download-button","text":"As shown above, you can choose to download the stable (left-hand download button) version of TamperMonkey or the BETA (right-hand download button) version. The stable version is recommended. You will be taken to your web brower's extension or add-on service .","title":"1.2. Click on the left-hand Download button"},{"location":"install_userscript/#13-follow-the-instructions-to-add-tampermonkey-to-your-web-browser","text":"Each web browser\u2019s browser extension installation process will be a little different. In general, it will provide you with details of what permissions the browser extension (Tampemonkey in this case) wishes to have and provides you with the option to install.","title":"1.3. Follow the instructions to add Tampermonkey to your web browser"},{"location":"install_userscript/#2-install-canvas-collections-userscript","text":"With TamperMonkey installed you can now install the canvas-collections userscript . Just click on that link. If all is working you should something like the following image. An image showing TamperMonkey providing you with details of the userscript and asking if you wish to install it.","title":"2. Install canvas-collections userscript"},{"location":"install_userscript/#3-turning-canvas-collections-off","text":"There are two ways to prevent canvas-collections from modifying your view of Canvas modules pages: - Disable TamperMonkey (or your userscript manager) - Disable the canvas-collection userscript","title":"3. Turning canvas-collections off"},{"location":"reference/","text":"Reference - Canvas Collections The features offered by Canvas Collections can be grouped into three categories: Collections Group Canvas Modules into collections and allow navigation between collections. Representations Change how each collection is represented to the learner. Modules Provide additional information about individual Canvas modules and use that information to modify their behaviour. Collections Configuration Add a new collection Insert instructions on how to add a new collection Existing Collections This list of already existing collections allows you to Change the order of the collections Delete a collection Specify a collection as the default collection Change a collection's representation include page output page Representations insert explanation and description of current representations Modules insert description of options available for modules and module configuration","title":"Reference"},{"location":"reference/#reference-canvas-collections","text":"The features offered by Canvas Collections can be grouped into three categories: Collections Group Canvas Modules into collections and allow navigation between collections. Representations Change how each collection is represented to the learner. Modules Provide additional information about individual Canvas modules and use that information to modify their behaviour.","title":"Reference - Canvas Collections"},{"location":"reference/#collections-configuration","text":"","title":"Collections Configuration"},{"location":"reference/#add-a-new-collection","text":"Insert instructions on how to add a new collection","title":"Add a new collection"},{"location":"reference/#existing-collections","text":"This list of already existing collections allows you to Change the order of the collections Delete a collection Specify a collection as the default collection Change a collection's representation include page output page","title":"Existing Collections"},{"location":"reference/#representations","text":"insert explanation and description of current representations","title":"Representations"},{"location":"reference/#modules","text":"insert description of options available for modules and module configuration","title":"Modules"},{"location":"dev/module-html-scraping/","text":"Module HTML scraping Details on the HTML for Canvas' modules page and how canvas-collections will scrape it. Current structure Sortable container for all modules <div id=\"context_modules_sortable_container\" class=\"item-group-container\"> Then the list of modules <div id=\"context_modules\" ... aria-label=\"Course Modules\"> Each Individual module <div id=\"context_module_{MODULE_ID}\"> header <div id=\"{MODULE_ID}\" class=\"ig-header header\"> <h2 class=\"screenreader-only\">{MODULE_TITLE}_</h2> <span class=\"ig-header-title\" title=\"{MODULE_TITLE}\"> <span class=\"name\" title=\"{MODULE_TITLE}_\">{MODULE_TITLE}_</span> <div class=\"prerequisites\"> </div> <div class=\"requirements_message\"> </div> <div class=\"ig-header-admin\"> </div> </div> content body <div id=\"context_module_content_{MODULE_ID}\"> List of content items <ul class=\"ig-list items context_module_items\"> Looks like the class identifies the type of item <li id=\"context_module_item_575\" class=\"context_module_item wiki_page...\"> Various header/display data <div class=\"ig-handle\"></div> <span class=\"type_icon\"></span> Information about the item? <div class=\"ig-info\"> <div class=\"module-item-title\"> <span class=\"item_name\"> <a class=\"ig-title title item_link\" title=\"{ITEM_TITLE}\" href=\"\"> {ITEM_TITLE} </a> Appears also to perhaps have some different spans/data based on the time e.g. assignment had span.points_possible span.completion_requirement </span> </div> <div class=\"module_item_icons\"></div> <div class=\"ig-details\"> <div class=\"requirement-description ig_details__item\"> </div> </div> <div class=\"ig-admin\"> Misc admin stuff - unspec'd here </div> </div> </li> </ul> </div>","title":"Module HTML scraping"},{"location":"dev/module-html-scraping/#module-html-scraping","text":"Details on the HTML for Canvas' modules page and how canvas-collections will scrape it.","title":"Module HTML scraping"},{"location":"dev/module-html-scraping/#current-structure","text":"Sortable container for all modules <div id=\"context_modules_sortable_container\" class=\"item-group-container\"> Then the list of modules <div id=\"context_modules\" ... aria-label=\"Course Modules\"> Each Individual module <div id=\"context_module_{MODULE_ID}\"> header <div id=\"{MODULE_ID}\" class=\"ig-header header\"> <h2 class=\"screenreader-only\">{MODULE_TITLE}_</h2> <span class=\"ig-header-title\" title=\"{MODULE_TITLE}\"> <span class=\"name\" title=\"{MODULE_TITLE}_\">{MODULE_TITLE}_</span> <div class=\"prerequisites\"> </div> <div class=\"requirements_message\"> </div> <div class=\"ig-header-admin\"> </div> </div> content body <div id=\"context_module_content_{MODULE_ID}\"> List of content items <ul class=\"ig-list items context_module_items\"> Looks like the class identifies the type of item <li id=\"context_module_item_575\" class=\"context_module_item wiki_page...\"> Various header/display data <div class=\"ig-handle\"></div> <span class=\"type_icon\"></span> Information about the item? <div class=\"ig-info\"> <div class=\"module-item-title\"> <span class=\"item_name\"> <a class=\"ig-title title item_link\" title=\"{ITEM_TITLE}\" href=\"\"> {ITEM_TITLE} </a> Appears also to perhaps have some different spans/data based on the time e.g. assignment had span.points_possible span.completion_requirement </span> </div> <div class=\"module_item_icons\"></div> <div class=\"ig-details\"> <div class=\"requirement-description ig_details__item\"> </div> </div> <div class=\"ig-admin\"> Misc admin stuff - unspec'd here </div> </div> </li> </ul> </div>","title":"Current structure"},{"location":"dev/design/design_v1/","text":"Design of \"v1\" canvas-collections Aims Improve structure of the code better MVC structure controller factory to distinguish edit/view and also different representations clear promise driven models for configuration file reading/writing move to API based module information (replacing scraping) test coverage remove the lib folder?? Improve the build process clearer path for userscript dev, userscript live, and javascript CDN versions Add support for configuration from JSON file in course \"files\" area multiple represenations of collections (for students) integrated collection editing interface turn collections on/off configure collections list of available collections change order rename collections indicate which collections are visible choose how collection navigation representation select collection representation configure module collection information which collection a module belongs to dates - including using Canvas module dates labels and label numbering image iframe active image Improve representations cards accessibility move away from tailwind?? component? Canvas specific stuff unpublished progress including module item drop downs table how to specify columns and link to module items collection navigation Repo structure dev release src controller factory at this level initialise edit collection-view module-view cards table ... States In each state there may be input elements, these will need to have event handlers that connect back to the controller and/or views (controller probably). Configuration edit only view shows the capability for canvas-collections to be turned on but not currently turned on may already be configured - show that probably a drop box of some description at the same level of student view button Edit collections turned on and in edit view on the modules page Modify \"canvas-collection\" display at top to have a drop down that allows configuration of collections Perhaps depending on configuration, show the collections representation at the top Modify the canvas module representations to include edit capabilities (mostly a drop down on module title) ??? View collections turn on but in student view shows configured collection navigation shows configured collection module information modifies the canvas module information What it displays is based on the selective representation for navigation and module information Code structure remove lib folder move canvasCollections function operation into cc_Controller factory class, figures out which controller from which state to call Need to check for cc configuration file ASYNC api call. Can probably do away with the waiting and by event driven parse the available configuration file combine URL and configuration file information to calculate which state to enter (and thus which controller) create that controller and call it create sub-folders for the various states","title":"Design of \"v1\" canvas-collections"},{"location":"dev/design/design_v1/#design-of-v1-canvas-collections","text":"","title":"Design of \"v1\" canvas-collections"},{"location":"dev/design/design_v1/#aims","text":"Improve structure of the code better MVC structure controller factory to distinguish edit/view and also different representations clear promise driven models for configuration file reading/writing move to API based module information (replacing scraping) test coverage remove the lib folder?? Improve the build process clearer path for userscript dev, userscript live, and javascript CDN versions Add support for configuration from JSON file in course \"files\" area multiple represenations of collections (for students) integrated collection editing interface turn collections on/off configure collections list of available collections change order rename collections indicate which collections are visible choose how collection navigation representation select collection representation configure module collection information which collection a module belongs to dates - including using Canvas module dates labels and label numbering image iframe active image Improve representations cards accessibility move away from tailwind?? component? Canvas specific stuff unpublished progress including module item drop downs table how to specify columns and link to module items collection navigation","title":"Aims"},{"location":"dev/design/design_v1/#repo-structure","text":"dev release src controller factory at this level initialise edit collection-view module-view cards table ...","title":"Repo structure"},{"location":"dev/design/design_v1/#states","text":"In each state there may be input elements, these will need to have event handlers that connect back to the controller and/or views (controller probably). Configuration edit only view shows the capability for canvas-collections to be turned on but not currently turned on may already be configured - show that probably a drop box of some description at the same level of student view button Edit collections turned on and in edit view on the modules page Modify \"canvas-collection\" display at top to have a drop down that allows configuration of collections Perhaps depending on configuration, show the collections representation at the top Modify the canvas module representations to include edit capabilities (mostly a drop down on module title) ??? View collections turn on but in student view shows configured collection navigation shows configured collection module information modifies the canvas module information What it displays is based on the selective representation for navigation and module information","title":"States"},{"location":"dev/design/design_v1/#code-structure","text":"remove lib folder move canvasCollections function operation into cc_Controller factory class, figures out which controller from which state to call Need to check for cc configuration file ASYNC api call. Can probably do away with the waiting and by event driven parse the available configuration file combine URL and configuration file information to calculate which state to enter (and thus which controller) create that controller and call it create sub-folders for the various states","title":"Code structure"}]}